package org.adhes.hemostase.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FicheHemophilieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheHemophilieAllPropertiesEquals(FicheHemophilie expected, FicheHemophilie actual) {
        assertFicheHemophilieAutoGeneratedPropertiesEquals(expected, actual);
        assertFicheHemophilieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheHemophilieAllUpdatablePropertiesEquals(FicheHemophilie expected, FicheHemophilie actual) {
        assertFicheHemophilieUpdatableFieldsEquals(expected, actual);
        assertFicheHemophilieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheHemophilieAutoGeneratedPropertiesEquals(FicheHemophilie expected, FicheHemophilie actual) {
        assertThat(expected)
            .as("Verify FicheHemophilie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheHemophilieUpdatableFieldsEquals(FicheHemophilie expected, FicheHemophilie actual) {
        assertThat(expected)
            .as("Verify FicheHemophilie relevant properties")
            .satisfies(e -> assertThat(e.getDossierNumber()).as("check dossierNumber").isEqualTo(actual.getDossierNumber()))
            .satisfies(e -> assertThat(e.getOrdreNumber()).as("check ordreNumber").isEqualTo(actual.getOrdreNumber()))
            .satisfies(e -> assertThat(e.getIndexNumber()).as("check indexNumber").isEqualTo(actual.getIndexNumber()))
            .satisfies(e -> assertThat(e.getParentsConsanguins()).as("check parentsConsanguins").isEqualTo(actual.getParentsConsanguins()))
            .satisfies(e ->
                assertThat(e.getDegreParenteConsanguins())
                    .as("check degreParenteConsanguins")
                    .isEqualTo(actual.getDegreParenteConsanguins())
            )
            .satisfies(e ->
                assertThat(e.getCasSimilairesFamille()).as("check casSimilairesFamille").isEqualTo(actual.getCasSimilairesFamille())
            )
            .satisfies(e -> assertThat(e.getNbreCasSimilaires()).as("check nbreCasSimilaires").isEqualTo(actual.getNbreCasSimilaires()))
            .satisfies(e ->
                assertThat(e.getDegreParenteCasSimilaires())
                    .as("check degreParenteCasSimilaires")
                    .isEqualTo(actual.getDegreParenteCasSimilaires())
            )
            .satisfies(e ->
                assertThat(e.getCasDecesSyndromeHemorragique())
                    .as("check casDecesSyndromeHemorragique")
                    .isEqualTo(actual.getCasDecesSyndromeHemorragique())
            )
            .satisfies(e -> assertThat(e.getNbreCasDeces()).as("check nbreCasDeces").isEqualTo(actual.getNbreCasDeces()))
            .satisfies(e -> assertThat(e.getFormeHemophilie()).as("check formeHemophilie").isEqualTo(actual.getFormeHemophilie()))
            .satisfies(e -> assertThat(e.getNbreFreres()).as("check nbreFreres").isEqualTo(actual.getNbreFreres()))
            .satisfies(e -> assertThat(e.getNbreSoeurs()).as("check nbreSoeurs").isEqualTo(actual.getNbreSoeurs()))
            .satisfies(e ->
                assertThat(e.getDateTestConfirmation()).as("check dateTestConfirmation").isEqualTo(actual.getDateTestConfirmation())
            )
            .satisfies(e -> assertThat(e.getHemogrammeHb()).as("check hemogrammeHb").isEqualTo(actual.getHemogrammeHb()))
            .satisfies(e -> assertThat(e.getHemogrammeHt()).as("check hemogrammeHt").isEqualTo(actual.getHemogrammeHt()))
            .satisfies(e -> assertThat(e.getPlaquettes()).as("check plaquettes").isEqualTo(actual.getPlaquettes()))
            .satisfies(e -> assertThat(e.getTp()).as("check tp").isEqualTo(actual.getTp()))
            .satisfies(e -> assertThat(e.getFibrinogene()).as("check fibrinogene").isEqualTo(actual.getFibrinogene()))
            .satisfies(e -> assertThat(e.getTcaMT()).as("check tcaMT").isEqualTo(actual.getTcaMT()))
            .satisfies(e -> assertThat(e.getTcaMT2h()).as("check tcaMT2h").isEqualTo(actual.getTcaMT2h()))
            .satisfies(e -> assertThat(e.getTcaTemoin2h()).as("check tcaTemoin2h").isEqualTo(actual.getTcaTemoin2h()))
            .satisfies(e -> assertThat(e.getTs()).as("check ts").isEqualTo(actual.getTs()))
            .satisfies(e -> assertThat(e.getHemarthrose()).as("check hemarthrose").isEqualTo(actual.getHemarthrose()))
            .satisfies(e -> assertThat(e.getSiegeHemarthrose()).as("check siegeHemarthrose").isEqualTo(actual.getSiegeHemarthrose()))
            .satisfies(e ->
                assertThat(e.getCirconstanceHemarthrose())
                    .as("check circonstanceHemarthrose")
                    .isEqualTo(actual.getCirconstanceHemarthrose())
            )
            .satisfies(e ->
                assertThat(e.getFrequenceHemarthrose()).as("check frequenceHemarthrose").isEqualTo(actual.getFrequenceHemarthrose())
            )
            .satisfies(e ->
                assertThat(e.getHematomeSuperficiel()).as("check hematomeSuperficiel").isEqualTo(actual.getHematomeSuperficiel())
            )
            .satisfies(e ->
                assertThat(e.getCirconstanceHematomeSuperficiel())
                    .as("check circonstanceHematomeSuperficiel")
                    .isEqualTo(actual.getCirconstanceHematomeSuperficiel())
            )
            .satisfies(e ->
                assertThat(e.getSiegeHematomeSuperficiel())
                    .as("check siegeHematomeSuperficiel")
                    .isEqualTo(actual.getSiegeHematomeSuperficiel())
            )
            .satisfies(e -> assertThat(e.getHematomePsoas()).as("check hematomePsoas").isEqualTo(actual.getHematomePsoas()))
            .satisfies(e ->
                assertThat(e.getCirconstanceHematomePsoas())
                    .as("check circonstanceHematomePsoas")
                    .isEqualTo(actual.getCirconstanceHematomePsoas())
            )
            .satisfies(e ->
                assertThat(e.getRecidiveHematomePsoas()).as("check recidiveHematomePsoas").isEqualTo(actual.getRecidiveHematomePsoas())
            )
            .satisfies(e ->
                assertThat(e.getHemorragiesCutaneoMuqueuses())
                    .as("check hemorragiesCutaneoMuqueuses")
                    .isEqualTo(actual.getHemorragiesCutaneoMuqueuses())
            )
            .satisfies(e ->
                assertThat(e.getTypeHemorragiesCutaneoMuqueuses())
                    .as("check typeHemorragiesCutaneoMuqueuses")
                    .isEqualTo(actual.getTypeHemorragiesCutaneoMuqueuses())
            )
            .satisfies(e ->
                assertThat(e.getFrequenceHemorragiesCutaneoMuqueuses())
                    .as("check frequenceHemorragiesCutaneoMuqueuses")
                    .isEqualTo(actual.getFrequenceHemorragiesCutaneoMuqueuses())
            )
            .satisfies(e -> assertThat(e.getHemorragieVisceres()).as("check hemorragieVisceres").isEqualTo(actual.getHemorragieVisceres()))
            .satisfies(e ->
                assertThat(e.getTypeHemorragieVisceres()).as("check typeHemorragieVisceres").isEqualTo(actual.getTypeHemorragieVisceres())
            )
            .satisfies(e ->
                assertThat(e.getExplorationHemorragieVisceres())
                    .as("check explorationHemorragieVisceres")
                    .isEqualTo(actual.getExplorationHemorragieVisceres())
            )
            .satisfies(e ->
                assertThat(e.getExamenLesionHemorragieVisceres())
                    .as("check examenLesionHemorragieVisceres")
                    .isEqualTo(actual.getExamenLesionHemorragieVisceres())
            )
            .satisfies(e -> assertThat(e.getSaignementSNC()).as("check saignementSNC").isEqualTo(actual.getSaignementSNC()))
            .satisfies(e -> assertThat(e.getEvolutionSNC()).as("check evolutionSNC").isEqualTo(actual.getEvolutionSNC()))
            .satisfies(e -> assertThat(e.getCirconcision()).as("check circoncision").isEqualTo(actual.getCirconcision()))
            .satisfies(e ->
                assertThat(e.getTypePreparationCirconcision())
                    .as("check typePreparationCirconcision")
                    .isEqualTo(actual.getTypePreparationCirconcision())
            )
            .satisfies(e ->
                assertThat(e.getSuiteOperatoireCirconcision())
                    .as("check suiteOperatoireCirconcision")
                    .isEqualTo(actual.getSuiteOperatoireCirconcision())
            )
            .satisfies(e -> assertThat(e.getAgeCirconcision()).as("check ageCirconcision").isEqualTo(actual.getAgeCirconcision()))
            .satisfies(e -> assertThat(e.getAvulsionDentaire()).as("check avulsionDentaire").isEqualTo(actual.getAvulsionDentaire()))
            .satisfies(e ->
                assertThat(e.getTypePreparationAvulsionDentaire())
                    .as("check typePreparationAvulsionDentaire")
                    .isEqualTo(actual.getTypePreparationAvulsionDentaire())
            )
            .satisfies(e ->
                assertThat(e.getInterventionChirurgicale())
                    .as("check interventionChirurgicale")
                    .isEqualTo(actual.getInterventionChirurgicale())
            )
            .satisfies(e ->
                assertThat(e.getTypeInterventionChirurgicale())
                    .as("check typeInterventionChirurgicale")
                    .isEqualTo(actual.getTypeInterventionChirurgicale())
            )
            .satisfies(e ->
                assertThat(e.getAccidentsHemorragiquesGraves())
                    .as("check accidentsHemorragiquesGraves")
                    .isEqualTo(actual.getAccidentsHemorragiquesGraves())
            )
            .satisfies(e ->
                assertThat(e.getCirconstanceAccidentsHemorragiquesGraves())
                    .as("check circonstanceAccidentsHemorragiquesGraves")
                    .isEqualTo(actual.getCirconstanceAccidentsHemorragiquesGraves())
            )
            .satisfies(e -> assertThat(e.getPriseEnCharge()).as("check priseEnCharge").isEqualTo(actual.getPriseEnCharge()))
            .satisfies(e -> assertThat(e.getCausePriseEnCharge()).as("check causePriseEnCharge").isEqualTo(actual.getCausePriseEnCharge()))
            .satisfies(e -> assertThat(e.getDoseProphylaxie()).as("check doseProphylaxie").isEqualTo(actual.getDoseProphylaxie()))
            .satisfies(e ->
                assertThat(e.getFrequenceProphylaxie()).as("check frequenceProphylaxie").isEqualTo(actual.getFrequenceProphylaxie())
            )
            .satisfies(e -> assertThat(e.getDebutProphylaxie()).as("check debutProphylaxie").isEqualTo(actual.getDebutProphylaxie()))
            .satisfies(e -> assertThat(e.getModaliteInjection()).as("check modaliteInjection").isEqualTo(actual.getModaliteInjection()))
            .satisfies(e ->
                assertThat(e.getTypeTraitementSubstitutif())
                    .as("check typeTraitementSubstitutif")
                    .isEqualTo(actual.getTypeTraitementSubstitutif())
            )
            .satisfies(e ->
                assertThat(e.getAge1ereSubstitution()).as("check age1ereSubstitution").isEqualTo(actual.getAge1ereSubstitution())
            )
            .satisfies(e -> assertThat(e.getAntecedentsPSL()).as("check antecedentsPSL").isEqualTo(actual.getAntecedentsPSL()))
            .satisfies(e -> assertThat(e.getPlasmaFraisCongele()).as("check plasmaFraisCongele").isEqualTo(actual.getPlasmaFraisCongele()))
            .satisfies(e -> assertThat(e.getCryoprecipite()).as("check cryoprecipite").isEqualTo(actual.getCryoprecipite()))
            .satisfies(e ->
                assertThat(e.getComplicationsOrthopediques())
                    .as("check complicationsOrthopediques")
                    .isEqualTo(actual.getComplicationsOrthopediques())
            )
            .satisfies(e ->
                assertThat(e.getTypeComplicationsOrthopediques())
                    .as("check typeComplicationsOrthopediques")
                    .isEqualTo(actual.getTypeComplicationsOrthopediques())
            )
            .satisfies(e -> assertThat(e.getArticulationCible()).as("check articulationCible").isEqualTo(actual.getArticulationCible()))
            .satisfies(e -> assertThat(e.getPecTherapeutique()).as("check pecTherapeutique").isEqualTo(actual.getPecTherapeutique()))
            .satisfies(e ->
                assertThat(e.getComplicationsInhibiteurs())
                    .as("check complicationsInhibiteurs")
                    .isEqualTo(actual.getComplicationsInhibiteurs())
            )
            .satisfies(e -> assertThat(e.getTauxInhibiteur()).as("check tauxInhibiteur").isEqualTo(actual.getTauxInhibiteur()))
            .satisfies(e ->
                assertThat(e.getTestRecuperationFAH()).as("check testRecuperationFAH").isEqualTo(actual.getTestRecuperationFAH())
            )
            .satisfies(e ->
                assertThat(e.getDateRecuperationFAH()).as("check dateRecuperationFAH").isEqualTo(actual.getDateRecuperationFAH())
            )
            .satisfies(e -> assertThat(e.getTauxRecuperation()).as("check tauxRecuperation").isEqualTo(actual.getTauxRecuperation()))
            .satisfies(e ->
                assertThat(e.getAntiFAHNonNeutralisant()).as("check antiFAHNonNeutralisant").isEqualTo(actual.getAntiFAHNonNeutralisant())
            )
            .satisfies(e -> assertThat(e.getRechercheACC()).as("check rechercheACC").isEqualTo(actual.getRechercheACC()))
            .satisfies(e -> assertThat(e.getCatTherapeutique()).as("check catTherapeutique").isEqualTo(actual.getCatTherapeutique()))
            .satisfies(e -> assertThat(e.getIti()).as("check iti").isEqualTo(actual.getIti()))
            .satisfies(e -> assertThat(e.getPosologieITI()).as("check posologieITI").isEqualTo(actual.getPosologieITI()))
            .satisfies(e -> assertThat(e.getDureeITI()).as("check dureeITI").isEqualTo(actual.getDureeITI()))
            .satisfies(e -> assertThat(e.getObservanceITI()).as("check observanceITI").isEqualTo(actual.getObservanceITI()))
            .satisfies(e ->
                assertThat(e.getCauseNonObservanceITI()).as("check causeNonObservanceITI").isEqualTo(actual.getCauseNonObservanceITI())
            )
            .satisfies(e ->
                assertThat(e.getEvolutionInhibiteur()).as("check evolutionInhibiteur").isEqualTo(actual.getEvolutionInhibiteur())
            )
            .satisfies(e ->
                assertThat(e.getProphylaxieHemlibra()).as("check prophylaxieHemlibra").isEqualTo(actual.getProphylaxieHemlibra())
            )
            .satisfies(e -> assertThat(e.getDateDebutHemlibra()).as("check dateDebutHemlibra").isEqualTo(actual.getDateDebutHemlibra()))
            .satisfies(e ->
                assertThat(e.getSchemaTherapeutique()).as("check schemaTherapeutique").isEqualTo(actual.getSchemaTherapeutique())
            )
            .satisfies(e -> assertThat(e.getEfficaciteHemlibra()).as("check efficaciteHemlibra").isEqualTo(actual.getEfficaciteHemlibra()))
            .satisfies(e -> assertThat(e.getSerologieHBC()).as("check serologieHBC").isEqualTo(actual.getSerologieHBC()))
            .satisfies(e -> assertThat(e.getSerologieHVC()).as("check serologieHVC").isEqualTo(actual.getSerologieHVC()))
            .satisfies(e -> assertThat(e.getDateDecouverteVHC()).as("check dateDecouverteVHC").isEqualTo(actual.getDateDecouverteVHC()))
            .satisfies(e -> assertThat(e.getChargeViraleVHC()).as("check chargeViraleVHC").isEqualTo(actual.getChargeViraleVHC()))
            .satisfies(e -> assertThat(e.getTraitementVHC()).as("check traitementVHC").isEqualTo(actual.getTraitementVHC()))
            .satisfies(e -> assertThat(e.getEvolutionVHC()).as("check evolutionVHC").isEqualTo(actual.getEvolutionVHC()))
            .satisfies(e -> assertThat(e.getSerologieHIV()).as("check serologieHIV").isEqualTo(actual.getSerologieHIV()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFicheHemophilieUpdatableRelationshipsEquals(FicheHemophilie expected, FicheHemophilie actual) {
        assertThat(expected)
            .as("Verify FicheHemophilie relationships")
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()));
    }
}
